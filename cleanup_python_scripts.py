#!/usr/bin/env python3
"""
Script de nettoyage des fichiers Python obsol√®tes
Cat√©gorise et supprime les scripts qui ne servent plus √† rien

Cat√©gories:
1. SCRIPTS UTILES √Ä CONSERVER - Outils d'automatisation r√©utilisables
2. SCRIPTS HISTORIQUES √Ä ARCHIVER - R√©f√©rences pour la documentation  
3. SCRIPTS OBSOL√àTES √Ä SUPPRIMER - One-shot termin√©s, doublons, etc.
"""

import os
import shutil
from pathlib import Path
from datetime import datetime

def analyze_and_cleanup_python_scripts():
    """Analyse et nettoie les scripts Python"""
    
    base_dir = Path("c:/Project_Learning_Simplified")
    
    # Cat√©gorisation des scripts
    scripts_to_keep = {
        # Scripts d'automatisation r√©utilisables
        "fix_css_backdrop_filter.py": "Outil de correction CSS r√©utilisable",
        "clean_vscode_references.py": "Outil de nettoyage VS Code",
        "force_clean_vscode_cache.py": "Outil de nettoyage cache avanc√©"
    }
    
    scripts_to_archive = {
        # Scripts de r√©f√©rence historique
        "optimize_all_subjects_structure.py": "R√©f√©rence de la grande optimisation du 28/09",
        "remove_shortcuts_corrections_evaluations.py": "R√©f√©rence nettoyage navigation",
        "uniformize_cours_navigation.py": "R√©f√©rence standardisation interface",
        "validate_navigation_cleanup.py": "Script de validation post-optimization"
    }
    
    scripts_to_delete = {
        # Scripts obsol√®tes / one-shot / doublons
        "add_webkit_backdrop_filter_prefix.py": "Doublon de fix_css_backdrop_filter.py",
        "build_index.py": "Script de construction obsol√®te", 
        "cleanup_old_maths_dirs.py": "One-shot termin√©",
        "create_all_subjects_structure.py": "One-shot de cr√©ation termin√©",
        "create_subject_readmes.py": "One-shot de cr√©ation termin√©",
        "enrich_maths_courses.py": "G√©n√©rateur de cours obsol√®te",
        "generate_course_page.py": "G√©n√©rateur obsol√®te",
        "generate_maths_courses.py": "G√©n√©rateur de cours obsol√®te",
        "inject_course.py": "Script d'injection obsol√®te",
        "inject_master_simple.py": "Script d'injection obsol√®te", 
        "test_index_master.py": "Script de test obsol√®te"
    }
    
    # Cr√©er le dossier d'archive
    archive_dir = base_dir / "scripts_archive"
    archive_dir.mkdir(exist_ok=True)
    
    print("=== ANALYSE DES SCRIPTS PYTHON ===\n")
    
    # Traitement des scripts
    deleted_count = 0
    archived_count = 0
    kept_count = 0
    
    # Conserver les scripts utiles
    print("üì¶ SCRIPTS CONSERV√âS (utiles):")
    for script, reason in scripts_to_keep.items():
        script_path = base_dir / script
        if script_path.exists():
            print(f"  ‚úÖ {script} - {reason}")
            kept_count += 1
    
    print(f"\nüìÅ SCRIPTS ARCHIV√âS ({archive_dir}):")
    for script, reason in scripts_to_archive.items():
        script_path = base_dir / script
        if script_path.exists():
            # Archiver avec timestamp
            timestamp = datetime.now().strftime("%Y%m%d")
            archived_name = f"{timestamp}_{script}"
            shutil.move(str(script_path), str(archive_dir / archived_name))
            print(f"  üì¶ {script} ‚Üí {archived_name} - {reason}")
            archived_count += 1
    
    print(f"\nüóëÔ∏è  SCRIPTS SUPPRIM√âS:")
    for script, reason in scripts_to_delete.items():
        script_path = base_dir / script
        if script_path.exists():
            os.remove(script_path)
            print(f"  ‚ùå {script} - {reason}")
            deleted_count += 1
    
    print(f"\n=== R√âSUM√â DU NETTOYAGE ===")
    print(f"Scripts conserv√©s: {kept_count}")
    print(f"Scripts archiv√©s: {archived_count}")  
    print(f"Scripts supprim√©s: {deleted_count}")
    print(f"Total trait√©: {kept_count + archived_count + deleted_count}")
    
    return kept_count, archived_count, deleted_count

if __name__ == "__main__":
    analyze_and_cleanup_python_scripts()